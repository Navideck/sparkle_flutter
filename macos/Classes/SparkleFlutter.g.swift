// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsSparkleFlutter(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsSparkleFlutter(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsSparkleFlutter(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashSparkleFlutter(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashSparkleFlutter(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashSparkleFlutter(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum UpdateCheckEvent: Int {
  case checkUpdates = 0
  case checkUpdatesInBackground = 1
  case checkUpdateInformation = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct Appcast: Hashable {
  var items: [AppcastItem]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Appcast? {
    let items = pigeonVar_list[0] as! [AppcastItem]

    return Appcast(
      items: items
    )
  }
  func toList() -> [Any?] {
    return [
      items
    ]
  }
  static func == (lhs: Appcast, rhs: Appcast) -> Bool {
    return deepEqualsSparkleFlutter(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSparkleFlutter(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AppcastItem: Hashable {
  var versionString: String? = nil
  var displayVersionString: String? = nil
  var fileURL: String? = nil
  var contentLength: Int64? = nil
  var infoURL: String? = nil
  var title: String? = nil
  var dateString: String? = nil
  var releaseNotesURL: String? = nil
  var itemDescription: String? = nil
  var itemDescriptionFormat: String? = nil
  var fullReleaseNotesURL: String? = nil
  var minimumSystemVersion: String? = nil
  var minimumOperatingSystemVersionIsOK: Bool? = nil
  var maximumSystemVersion: String? = nil
  var maximumOperatingSystemVersionIsOK: Bool? = nil
  var channel: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AppcastItem? {
    let versionString: String? = nilOrValue(pigeonVar_list[0])
    let displayVersionString: String? = nilOrValue(pigeonVar_list[1])
    let fileURL: String? = nilOrValue(pigeonVar_list[2])
    let contentLength: Int64? = nilOrValue(pigeonVar_list[3])
    let infoURL: String? = nilOrValue(pigeonVar_list[4])
    let title: String? = nilOrValue(pigeonVar_list[5])
    let dateString: String? = nilOrValue(pigeonVar_list[6])
    let releaseNotesURL: String? = nilOrValue(pigeonVar_list[7])
    let itemDescription: String? = nilOrValue(pigeonVar_list[8])
    let itemDescriptionFormat: String? = nilOrValue(pigeonVar_list[9])
    let fullReleaseNotesURL: String? = nilOrValue(pigeonVar_list[10])
    let minimumSystemVersion: String? = nilOrValue(pigeonVar_list[11])
    let minimumOperatingSystemVersionIsOK: Bool? = nilOrValue(pigeonVar_list[12])
    let maximumSystemVersion: String? = nilOrValue(pigeonVar_list[13])
    let maximumOperatingSystemVersionIsOK: Bool? = nilOrValue(pigeonVar_list[14])
    let channel: String? = nilOrValue(pigeonVar_list[15])

    return AppcastItem(
      versionString: versionString,
      displayVersionString: displayVersionString,
      fileURL: fileURL,
      contentLength: contentLength,
      infoURL: infoURL,
      title: title,
      dateString: dateString,
      releaseNotesURL: releaseNotesURL,
      itemDescription: itemDescription,
      itemDescriptionFormat: itemDescriptionFormat,
      fullReleaseNotesURL: fullReleaseNotesURL,
      minimumSystemVersion: minimumSystemVersion,
      minimumOperatingSystemVersionIsOK: minimumOperatingSystemVersionIsOK,
      maximumSystemVersion: maximumSystemVersion,
      maximumOperatingSystemVersionIsOK: maximumOperatingSystemVersionIsOK,
      channel: channel
    )
  }
  func toList() -> [Any?] {
    return [
      versionString,
      displayVersionString,
      fileURL,
      contentLength,
      infoURL,
      title,
      dateString,
      releaseNotesURL,
      itemDescription,
      itemDescriptionFormat,
      fullReleaseNotesURL,
      minimumSystemVersion,
      minimumOperatingSystemVersionIsOK,
      maximumSystemVersion,
      maximumOperatingSystemVersionIsOK,
      channel,
    ]
  }
  static func == (lhs: AppcastItem, rhs: AppcastItem) -> Bool {
    return deepEqualsSparkleFlutter(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashSparkleFlutter(value: toList(), hasher: &hasher)
  }
}

private class SparkleFlutterPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return UpdateCheckEvent(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return Appcast.fromList(self.readValue() as! [Any?])
    case 131:
      return AppcastItem.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SparkleFlutterPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? UpdateCheckEvent {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? Appcast {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AppcastItem {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SparkleFlutterPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SparkleFlutterPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SparkleFlutterPigeonCodecWriter(data: data)
  }
}

class SparkleFlutterPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = SparkleFlutterPigeonCodec(readerWriter: SparkleFlutterPigeonCodecReaderWriter())
}

/// Flutter -> Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SparkleFlutterChannel {
  func initialize(feedUrl: String?) throws
  func checkForUpdates(inBackground: Bool?) throws
  func setScheduledCheckInterval(interval: Int64) throws
  func automaticallyChecksForUpdates(automaticallyChecks: Bool) throws
  func automaticallyDownloadsUpdates(automaticallyDownloads: Bool) throws
  func canCheckForUpdates() throws -> Bool
  func sessionInProgress() throws -> Bool
  func addUpdateCheckOptionInAppMenu(title: String?, menuName: String?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SparkleFlutterChannelSetup {
  static var codec: FlutterStandardMessageCodec { SparkleFlutterPigeonCodec.shared }
  /// Sets up an instance of `SparkleFlutterChannel` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SparkleFlutterChannel?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let feedUrlArg: String? = nilOrValue(args[0])
        do {
          try api.initialize(feedUrl: feedUrlArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let checkForUpdatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.checkForUpdates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkForUpdatesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inBackgroundArg: Bool? = nilOrValue(args[0])
        do {
          try api.checkForUpdates(inBackground: inBackgroundArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      checkForUpdatesChannel.setMessageHandler(nil)
    }
    let setScheduledCheckIntervalChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.setScheduledCheckInterval\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setScheduledCheckIntervalChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let intervalArg = args[0] as! Int64
        do {
          try api.setScheduledCheckInterval(interval: intervalArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setScheduledCheckIntervalChannel.setMessageHandler(nil)
    }
    let automaticallyChecksForUpdatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.automaticallyChecksForUpdates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      automaticallyChecksForUpdatesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let automaticallyChecksArg = args[0] as! Bool
        do {
          try api.automaticallyChecksForUpdates(automaticallyChecks: automaticallyChecksArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      automaticallyChecksForUpdatesChannel.setMessageHandler(nil)
    }
    let automaticallyDownloadsUpdatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.automaticallyDownloadsUpdates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      automaticallyDownloadsUpdatesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let automaticallyDownloadsArg = args[0] as! Bool
        do {
          try api.automaticallyDownloadsUpdates(automaticallyDownloads: automaticallyDownloadsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      automaticallyDownloadsUpdatesChannel.setMessageHandler(nil)
    }
    let canCheckForUpdatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.canCheckForUpdates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canCheckForUpdatesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.canCheckForUpdates()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      canCheckForUpdatesChannel.setMessageHandler(nil)
    }
    let sessionInProgressChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.sessionInProgress\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sessionInProgressChannel.setMessageHandler { _, reply in
        do {
          let result = try api.sessionInProgress()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sessionInProgressChannel.setMessageHandler(nil)
    }
    let addUpdateCheckOptionInAppMenuChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.addUpdateCheckOptionInAppMenu\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addUpdateCheckOptionInAppMenuChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg: String? = nilOrValue(args[0])
        let menuNameArg: String? = nilOrValue(args[1])
        do {
          try api.addUpdateCheckOptionInAppMenu(title: titleArg, menuName: menuNameArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addUpdateCheckOptionInAppMenuChannel.setMessageHandler(nil)
    }
  }
}
/// Native -> Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol SparkleFlutterCallbackChannelProtocol {
  func onUpdaterError(error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdaterCheckingForUpdate(appcast appcastArg: Appcast?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdaterUpdateAvailable(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdaterUpdateNotAvailable(error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdaterUpdateDownloaded(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdaterBeforeQuitForUpdate(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdateDidFinishUpdateCycle(event eventArg: UpdateCheckEvent, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class SparkleFlutterCallbackChannel: SparkleFlutterCallbackChannelProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SparkleFlutterPigeonCodec {
    return SparkleFlutterPigeonCodec.shared
  }
  func onUpdaterError(error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdaterCheckingForUpdate(appcast appcastArg: Appcast?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterCheckingForUpdate\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([appcastArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdaterUpdateAvailable(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateAvailable\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([appcastItemArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdaterUpdateNotAvailable(error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateNotAvailable\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdaterUpdateDownloaded(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateDownloaded\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([appcastItemArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdaterBeforeQuitForUpdate(appcastItem appcastItemArg: AppcastItem?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterBeforeQuitForUpdate\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([appcastItemArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onUpdateDidFinishUpdateCycle(event eventArg: UpdateCheckEvent, error errorArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdateDidFinishUpdateCycle\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
