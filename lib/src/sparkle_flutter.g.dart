// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


class Appcast {
  Appcast({
    required this.items,
  });

  List<AppcastItem> items;

  List<Object?> _toList() {
    return <Object?>[
      items,
    ];
  }

  Object encode() {
    return _toList();  }

  static Appcast decode(Object result) {
    result as List<Object?>;
    return Appcast(
      items: (result[0] as List<Object?>?)!.cast<AppcastItem>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Appcast || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class AppcastItem {
  AppcastItem({
    this.versionString,
    this.displayVersionString,
    this.fileURL,
    this.contentLength,
    this.infoURL,
    this.title,
    this.dateString,
    this.releaseNotesURL,
    this.itemDescription,
    this.itemDescriptionFormat,
    this.fullReleaseNotesURL,
    this.minimumSystemVersion,
    this.minimumOperatingSystemVersionIsOK,
    this.maximumSystemVersion,
    this.maximumOperatingSystemVersionIsOK,
    this.channel,
  });

  String? versionString;

  String? displayVersionString;

  String? fileURL;

  int? contentLength;

  String? infoURL;

  String? title;

  String? dateString;

  String? releaseNotesURL;

  String? itemDescription;

  String? itemDescriptionFormat;

  String? fullReleaseNotesURL;

  String? minimumSystemVersion;

  bool? minimumOperatingSystemVersionIsOK;

  String? maximumSystemVersion;

  bool? maximumOperatingSystemVersionIsOK;

  String? channel;

  List<Object?> _toList() {
    return <Object?>[
      versionString,
      displayVersionString,
      fileURL,
      contentLength,
      infoURL,
      title,
      dateString,
      releaseNotesURL,
      itemDescription,
      itemDescriptionFormat,
      fullReleaseNotesURL,
      minimumSystemVersion,
      minimumOperatingSystemVersionIsOK,
      maximumSystemVersion,
      maximumOperatingSystemVersionIsOK,
      channel,
    ];
  }

  Object encode() {
    return _toList();  }

  static AppcastItem decode(Object result) {
    result as List<Object?>;
    return AppcastItem(
      versionString: result[0] as String?,
      displayVersionString: result[1] as String?,
      fileURL: result[2] as String?,
      contentLength: result[3] as int?,
      infoURL: result[4] as String?,
      title: result[5] as String?,
      dateString: result[6] as String?,
      releaseNotesURL: result[7] as String?,
      itemDescription: result[8] as String?,
      itemDescriptionFormat: result[9] as String?,
      fullReleaseNotesURL: result[10] as String?,
      minimumSystemVersion: result[11] as String?,
      minimumOperatingSystemVersionIsOK: result[12] as bool?,
      maximumSystemVersion: result[13] as String?,
      maximumOperatingSystemVersionIsOK: result[14] as bool?,
      channel: result[15] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AppcastItem || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Appcast) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is AppcastItem) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return Appcast.decode(readValue(buffer)!);
      case 130: 
        return AppcastItem.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Flutter -> Native
class SparkleFlutterChannel {
  /// Constructor for [SparkleFlutterChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SparkleFlutterChannel({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setFeedURL(String url) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.setFeedURL$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[url]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> checkForUpdates({bool? inBackground}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.checkForUpdates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[inBackground]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScheduledCheckInterval(int interval) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.universal_ble.SparkleFlutterChannel.setScheduledCheckInterval$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[interval]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// Native -> Flutter
abstract class SparkleFlutterCallbackChannel {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onUpdaterError(String? error);

  void onUpdaterCheckingForUpdate(Appcast? appcast);

  void onUpdaterUpdateAvailable(AppcastItem? appcastItem);

  void onUpdaterUpdateNotAvailable(String? error);

  void onUpdaterUpdateDownloaded(AppcastItem? appcastItem);

  void onUpdaterBeforeQuitForUpdate(AppcastItem? appcastItem);

  static void setUp(SparkleFlutterCallbackChannel? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          try {
            api.onUpdaterError(arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterCheckingForUpdate$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterCheckingForUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Appcast? arg_appcast = (args[0] as Appcast?);
          try {
            api.onUpdaterCheckingForUpdate(arg_appcast);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateAvailable$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateAvailable was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AppcastItem? arg_appcastItem = (args[0] as AppcastItem?);
          try {
            api.onUpdaterUpdateAvailable(arg_appcastItem);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateNotAvailable$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateNotAvailable was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          try {
            api.onUpdaterUpdateNotAvailable(arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateDownloaded$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterUpdateDownloaded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AppcastItem? arg_appcastItem = (args[0] as AppcastItem?);
          try {
            api.onUpdaterUpdateDownloaded(arg_appcastItem);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterBeforeQuitForUpdate$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.universal_ble.SparkleFlutterCallbackChannel.onUpdaterBeforeQuitForUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AppcastItem? arg_appcastItem = (args[0] as AppcastItem?);
          try {
            api.onUpdaterBeforeQuitForUpdate(arg_appcastItem);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
